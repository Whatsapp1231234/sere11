let handler = async (m, { conn, isROwner, text }) => {
    const delay = time => new Promise(res => setTimeout(res, time))
    let getGroups = await conn.groupFetchAllParticipating()
    let groups = Object.entries(getGroups).slice(0).map(entry => entry[1])
    let anu = groups.map(v => v.id)
    var pesan = m.quoted && m.quoted.text ? m.quoted.text : text
    if(!pesan) throw '*[‚ùóùêàùêçùêÖùêé‚ùó] –í–í–ï–î–ò–¢–ï –°–û–û–ë–©–ï–ù–ò–ï*'
   // m.reply(`*[‚ùóùêàùêçùêÖùêé‚ùó] ùôºùô¥ùôΩùöÇùô∞ùôπùô¥ ùô¥ùôΩùöÖùô∏ùô∞ùô≥ùôæ ùô∞ ${anu.length} ùô∂ùöÅùöÑùôøùôæ/ùöÇ*\n\n*ùêçùêéùêìùêÄ: ùô¥ùöÇ ùôøùôæùöÇùô∏ùô±ùôªùô¥ ùöÄùöÑùô¥ ùöÉùô¥ùôΩùô∂ùô∞ ùôµùô∞ùôªùôªùôæùöÇ ùô¥ùöÇùöÉùô¥ ùô≤ùôæùôºùô∞ùôΩùô≥ùôæ ùöà ùôΩùôæ ùöÇùô¥ ùô¥ùôΩùöÖùô∏ùô¥ ùô∞ ùöÉùôæùô≥ùôæùöÇ ùôªùôæùöÇ ùô≤ùô∑ùô∞ùöÉùöÇ, ùô≥ùô∏ùöÇùô≤ùöÑùôªùôøùô¥ ùôøùôæùöÅ ùô¥ùôª ùôºùôæùôºùô¥ùôΩùöÉùôæ`)
    for (let i of anu) {
    await delay(500)
    conn.relayMessage(i, 
{ liveLocationMessage: {
  degreesLatitude: 35.685506276233525,
  degreesLongitude: 139.75270667105852,
  accuracyInMeters: 0,
degreesClockwiseFromMagneticNorth: 2,
caption: '[‚ùó–û–ë–†–ê–©–ï–ù–ò–ï‚ùó]\n\n' + pesan + '\n\n *–≠–¢–û –û–§–ò–¶–ò–ê–õ–¨–ù–û–ï –ó–ê–Ø–í–õ–ï–ù–ò–ï* ',
sequenceNumber: 2,
timeOffset: 3,
contextInfo: m,
}}, {}).catch(_ => _)
    }
  m.reply(`*[‚ùóùêàùêçùêÖùêé‚ùó] –û–¢–ü–†–ê–í–ò–õ –í–°–ï–ì–û –í ${anu.length} –ß–ê–¢–û–í*\n\n*–°–û–ó–î–ê–¢–ï–õ–¨, –Ø –û–¢–ü–†–ê–í–ò–õ –í–ê–®–ï –°–û–û–ë–©–ï–ù–ò–ï*`)
}
handler.help = ['broadcastgroup', 'bcgc'].map(v => v + ' <teks>')
handler.tags = ['owner']
handler.command = /^(–æ–±—å—è–≤–ª–µ–Ω–∏–µ)$/i
handler.owner = true

export default handler
